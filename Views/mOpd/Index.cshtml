@{
    ViewData["Title"] = ViewBag.Title;
    var Organisasi = "#organisasi";
    var SubOrganisasi = "#suborganisasi";
}
<ejs-toast id="toast_default" created="createdToasObj">
    <e-toast-position X="Right"></e-toast-position>
</ejs-toast>

<div id="organisasi" style="display: none">
    <ejs-grid id="GridOpd" actionComplete="CompleteActionOpd" height="490" allowPaging="true" allowResizing="true" allowSorting="true" allowReordering="true" allowGrouping="false"
              toolbar="@(new List<string>() { "Search", "Add", "Edit", "Delete","Update","Cancel" , "ExcelExport" ,"PdfExport"})" allowFiltering="true" allowSelection="true"
              allowExcelExport="true" allowPdfExport="true" toolbarClick="toolbarAction" created="createdGridOpd" query="@ViewBag.queryOpd">
        <e-grid-pagesettings pageCount="5" pageSize="12" pageSizes="true"></e-grid-pagesettings>
        <e-grid-filterSettings type="Menu"></e-grid-filterSettings>
        <e-grid-editSettings allowAdding="true" allowDeleting="true" allowEditing="true" mode="Dialog" template='#templatedialog' showDeleteConfirmDialog="true"></e-grid-editSettings>
        <e-grid-selectionsettings type="Single"></e-grid-selectionsettings>
        <e-grid-columns>
            <e-grid-column field="IdOpd" headerText="IdOpd" isPrimaryKey="true" isIdentity="true" visible="false"></e-grid-column>
            <e-grid-column field="ListUrusan" width="150" headerText="Nama Urusan"></e-grid-column>
            <e-grid-column field="KodeSubOpd" width="50" headerText="Kode OPD"></e-grid-column>
            <e-grid-column field="NamaSubOpd" width="150" headerText="Nama OPD"></e-grid-column>
        </e-grid-columns>
    </ejs-grid>
</div>

<div id="suborganisasi" style="display: none">
   <ejs-grid id="GridSubOpd" actionComplete="CompleteActionSubOpd" height="490" allowPaging="true" allowResizing="true" allowSorting="true" allowReordering="true" allowGrouping="false"
              toolbar="@(new List<string>() { "Search", "Add", "Edit", "Delete","Update","Cancel" , "ExcelExport" ,"PdfExport"})" allowFiltering="true" allowSelection="true"
              allowExcelExport="true" allowPdfExport="true" toolbarClick="toolbarAction" created="createdGridSubOpd" query="@ViewBag.querySubOpd">
        <e-grid-pagesettings pageCount="5" pageSize="12" pageSizes="true"></e-grid-pagesettings>
        <e-grid-filterSettings type="Menu"></e-grid-filterSettings>
        <e-grid-editSettings allowAdding="true" allowDeleting="true" allowEditing="true" mode="Dialog" template='#templatedialog' showDeleteConfirmDialog="true"></e-grid-editSettings>
        <e-grid-selectionsettings type="Single"></e-grid-selectionsettings>
        <e-grid-columns>
            <e-grid-column field="IdOpd" headerText="IdOpd" isPrimaryKey="true" isIdentity="true" visible="false"></e-grid-column>
            <e-grid-column field="ListUrusan" width="150" headerText="Nama Urusan"></e-grid-column>
            <e-grid-column field="KodeOpd" width="50" headerText="Kode OPD"></e-grid-column>
            <e-grid-column field="KodeSubOpd" width="50" headerText="Kode Sub OPD"></e-grid-column>
            <e-grid-column field="NamaSubOpd" width="150" headerText="Nama Sub OPD"></e-grid-column>
        </e-grid-columns>
    </ejs-grid>
</div>

<ejs-tab id="adaptiveTab" heightAdjustMode="None" height="250px" created="tabOPD">
    <e-tab-tabitems>
        <e-tab-tabitem header="ViewBag.headerOrganisasi" content="@Organisasi"></e-tab-tabitem>
        <e-tab-tabitem header="ViewBag.headerSubOrganisasi" content="@SubOrganisasi"></e-tab-tabitem>
    </e-tab-tabitems>
</ejs-tab>

@section SectionControls{
    <script id='templatedialog' type="text/x-template">
        <div id="Tempdialog">
        </div>
    </script>

    <script type="text/javascript">
        var toastObj;
        var tabObj;

        function createdToasObj() {
            toastObj = this;
        }

        function tabOPD() {
            tabObj = document.getElementById('adaptiveTab').ej2_instances[0];
        }

        function paramToast(title, cssclass, message) {
            setTimeout(
                () => {
                    var toastObj = document.getElementById('toast_default').ej2_instances[0];
                    toastObj.title = title;
                    toastObj.cssClass = cssclass;
                    toastObj.content = message;
                    toastObj.target = document.body;
                    toastObj.show();
                }, 500);
        }

        //#region opd
        function CompleteActionOpd(args) {
            var grid = document.querySelector('#GridOpd').ej2_instances[0];

            if (args.requestType === 'beginEdit' || args.requestType === 'add') {
                var dialog = args.dialog;
                dialog.height = 320;
                // change the header of the dialog
                dialog.header = args.requestType === 'beginEdit' ? 'Edit ' + args.rowData['NamaSubOpd'] : 'New OPD';
                args.form.ej2_instances[0].addRules('ListIdUrusan', { required: [true, 'Silahkan Pilih Urusan'] });
                args.form.ej2_instances[0].addRules('KodeSubOpd', { required: [true, 'Silahkan Isi Kode OPD'], minLength: [1, 'Kode OPD Minimal 1 huruf'] });
                args.form.ej2_instances[0].addRules('NamaSubOpd', { required: [true, 'Silahkan Isi Nama OPD'], minLength: [3, 'Nama OPD Minimal 3 huruf'] });

                let spinner = ej.popups.createSpinner({ target: args.dialog.element });
                ej.popups.showSpinner(args.dialog.element);
                var ajax = new ej.base.Ajax({
                    url: "@Url.Action("OpdMasterTemplateOpd", "OpdMaster")", //render the partial view
                    type: "POST",
                    contentType: "application/json",
                    data: JSON.stringify({ value: args.rowData })
                });
                ajax.send().then(function (data) {
                    appendElement(data, args.form); //Render the edit form with selected record
                    args.form.elements.namedItem('KodeSubOpd').focus();

                    if (typeof args.rowData['ListIdUrusan'] != 'undefined') {
                        var dropObject = document.getElementById("ListIdUrusan").ej2_instances[0];
                        dropObject.value = args.rowData['ListIdUrusan'];
                        dropObject.text = args.rowData['ListUrusan'];
                    }
                    ej.popups.hideSpinner(args.dialog.element);
                }).catch(function (xhr) {
                    console.log(xhr);
                    ej.popups.hideSpinner(args.dialog.element);
                });
            }
            else if (args.requestType === 'save') {
                grid.refresh();
                grid.closeEdit();
            }
        }

        function createdGridOpd(args) {
            class CustomAdaptor extends ej.data.UrlAdaptor {
                processResponse(data, ds, query, xhr, request, changes) {
                    if (!ej.base.isNullOrUndefined(data.message)) {
                        if ((data.message.indexOf('BERHASIL DISIMPAN') == -1) && (data.message.indexOf('BERHASIL DIHAPUS') == -1)) {
                            paramToast('Error Master Opd', 'e-toast-danger', data.message);
                        }
                        else {
                            paramToast('Master Opd', 'e-toast-success', data.message);
                        }
                    }

                    if (!ej.base.isNullOrUndefined(data.data))
                        return data.data;
                    else
                        return data;
                }
            }
            var grid = document.querySelector('#GridOpd').ej2_instances[0];
            grid.dataSource = new ej.data.DataManager({
                url: "/OpdMaster/OpdMasterAll",
                crudUrl: "/OpdMaster/OpdMasterCrud",
                adaptor: new CustomAdaptor()
            });
        }

        function onfilteringUrusan(e) {
            var OPDObj = document.getElementById("ListIdUrusan").ej2_instances[0];
            if (e.text == '' && e.text.length < 3) {
                e.updateData(OPDObj.dataSource);
            }
            
            let query = new ej.data.Query().select(['NamaSubUrusan', 'IdUrusan']).take(6).addParams('IdPosisi', 2);
            query = (e.text !== '' && e.text.length >= 3) ? query.where('NamaSubUrusan', 'contains', e.text, true) : query;

            e.updateData(OPDObj.dataSource, query);
        }
        //#endregion opd

        //#region subopd
        function CompleteActionSubOpd(args) {
            var grid = document.querySelector('#GridSubOpd').ej2_instances[0];

            if (args.requestType === 'beginEdit' || args.requestType === 'add') {
                var dialog = args.dialog;
                dialog.height = 420;
                // change the header of the dialog
                dialog.header = args.requestType === 'beginEdit' ? 'Edit ' + args.rowData['NamaSubOpd'] : 'New Sub Opd';
                args.form.ej2_instances[0].addRules('ListIdUrusan', { required: [true, 'Silahkan Pilih Urusan'] });
                args.form.ej2_instances[0].addRules('IdParent', { required: [true, 'Silahkan Pilih OPD'] });
                args.form.ej2_instances[0].addRules('KodeSubOpd', { required: [true, 'Silahkan Isi Kode Sub Opd'], minLength: [1, 'Kode Sub OPD Minimal 1 huruf'] });
                args.form.ej2_instances[0].addRules('NamaSubOpd', { required: [true, 'Silahkan Isi Nama Sub Opd'], minLength: [3, 'Nama Sub OPD Minimal 3 huruf'] });

                let spinner = ej.popups.createSpinner({ target: args.dialog.element });
                ej.popups.showSpinner(args.dialog.element);
                var ajax = new ej.base.Ajax({
                    url: "@Url.Action("OpdMasterTemplateSubOpd", "OpdMaster")", //render the partial view
                    type: "POST",
                    contentType: "application/json",
                    data: JSON.stringify({ value: args.rowData })
                });
                ajax.send().then(function (data) {
                    appendElement(data, args.form); //Render the edit form with selected record
                    args.form.elements.namedItem('KodeSubOpd').focus();
                    if (typeof args.rowData['ListIdUrusan'] != 'undefined') {
                        var dropObject = document.getElementById("ListIdUrusan").ej2_instances[0];
                        dropObject.value = args.rowData['ListIdUrusan'];
                        dropObject.text = args.rowData['ListUrusan'];
                    }
                    if (typeof args.rowData['IdParent'] != 'undefined') {
                        var dropObject = document.getElementById("IdParent").ej2_instances[0];
                        dropObject.value = args.rowData['IdParent'];
                        dropObject.text = args.rowData['NamaOpd'];
                    }
                    ej.popups.hideSpinner(args.dialog.element);
                }).catch(function (xhr) {
                    console.log(xhr);
                    ej.popups.hideSpinner(args.dialog.element);
                });
            }
            else if (args.requestType === 'save') {
                grid.refresh();
                grid.closeEdit();
            }
        }

        function createdGridSubOpd(args) {
            class CustomAdaptor extends ej.data.UrlAdaptor {
                processResponse(data, ds, query, xhr, request, changes) {
                    if (!ej.base.isNullOrUndefined(data.message)) {
                        if ((data.message.indexOf('BERHASIL DISIMPAN') == -1) && (data.message.indexOf('BERHASIL DIHAPUS') == -1)) {
                            paramToast('Error Master Sub Opd', 'e-toast-danger', data.message);
                        }
                        else {
                            paramToast('Master Sub Opd', 'e-toast-success', data.message);
                        }
                    }

                    if (!ej.base.isNullOrUndefined(data.data))
                        return data.data;
                    else
                        return data;
                }
            }
            var grid = document.querySelector('#GridSubOpd').ej2_instances[0];
            grid.dataSource = new ej.data.DataManager({
                url: "/OpdMaster/OpdMasterAll",
                crudUrl: "/OpdMaster/OpdMasterCrud",
                adaptor: new CustomAdaptor()
            });
        }

        function onfilteringOpd(e) {
            var UrusanOBJ = document.getElementById('ListIdUrusan').ej2_instances[0];
            var OPDObj = document.getElementById("IdParent").ej2_instances[0];
            if (e.text == '' && e.text.length < 3) {
                e.updateData(OPDObj.dataSource);
            }

            let query = new ej.data.Query().select(['NamaSubOpd', 'IdOpd']).take(6).addParams('IdPosisi', 1);
            query = (e.text !== '' && e.text.length >= 3) ? query.where(new ej.data.Predicate('NamaSubOpd', 'contains', e.text, true).and('ListIdUrusan', 'equal', UrusanOBJ.value, true)) : query.where('ListIdUrusan', 'equal', UrusanOBJ.value, true);

            e.updateData(OPDObj.dataSource, query);
        }

        function onchangeUrusan() {
            var UrusanOBJ = document.getElementById('ListIdUrusan').ej2_instances[0];
            var OPDObj = document.getElementById('IdParent').ej2_instances[0];
            OPDObj.enabled = true;
            var OPDObjQuery = new ej.data.Query().where('ListIdUrusan', 'equal', UrusanOBJ.value).addParams('IdPosisi', 1);
            OPDObj.query = OPDObjQuery;
            OPDObj.text = null;
            OPDObj.dataBind();
        }
        //#endregion subopd

        function appendElement(elementString, form) {
            form.querySelector("#Tempdialog").innerHTML = elementString;
            var script = document.createElement('script');
            script.type = "text/javascript";
            var serverScript = form.querySelector("#Tempdialog").querySelector('script');
            script.textContent = serverScript.innerHTML;
            document.head.appendChild(script);
            serverScript.remove();
        }

        function toolbarAction(args) {
            var fileNameGrid = "";

            if (this.element.id === "GridOpd") {
                fileNameGrid = "Organisasi";
            }
            else if (this.element.id === "GridSubOpd") {
                fileNameGrid = "Sub Organisasi";
            }

            var fileName = "Master " + fileNameGrid;

            if (args.item.id === this.element.id + '_pdfexport') {
                var exportProperties = {
                    fileName: fileName + ".pdf"
                };

                this.pdfExport(exportProperties);
            }
            if (args.item.id === this.element.id + '_excelexport') {
                var exportProperties = {
                    fileName: fileName + ".xlsx"
                };

                this.excelExport(exportProperties);
            }
        }
    </script>
}
